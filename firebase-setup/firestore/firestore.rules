// CodeContextPro-MES Firestore Security Rules
// SECURITY-FIRST: Default to DENY, grant access explicitly

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // DEFAULT DENY ALL - Security principle: fail-closed
    match /{document=**} {
      allow read, write: if false;
    }
    
    // PUBLIC STATS (Read-only for marketing)
    match /public/stats {
      allow read: if true;  // Public read for early adopter counter
      allow write: if false; // Only Cloud Functions can write
    }
    
    // LICENSES (User-owned, read-only for clients)
    match /licenses/{licenseId} {
      allow read: if request.auth != null 
        && request.auth.token.email == resource.data.email;
      allow write: if false; // Only Cloud Functions can create/update licenses
    }
    
    // USER MEMORIES (Cloud-synced, encrypted)
    match /memories/{userId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == userId;
    }
    
    // USAGE TRACKING (User-owned for quota enforcement)
    match /usage/{userId} {
      allow read: if request.auth != null 
        && request.auth.uid == userId;
      allow write: if false; // Only Cloud Functions can update usage
    }
    
    // EXECUTION LOGS (User-owned, append-only)
    match /executions/{userId}/logs/{logId} {
      allow read: if request.auth != null 
        && request.auth.uid == userId;
      allow create: if request.auth != null 
        && request.auth.uid == userId;
      allow update, delete: if false; // Logs are immutable
    }
    
    // ADMIN COLLECTIONS (Server-side only)
    match /admin/{document=**} {
      allow read, write: if false; // Absolutely no client access
    }
    
    match /system/{document=**} {
      allow read, write: if false; // System data - server-only
    }
  }
}